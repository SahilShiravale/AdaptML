name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci
      
      - name: Lint frontend
        working-directory: ./frontend
        run: npm run lint
      
      - name: Test frontend
        working-directory: ./frontend
        run: npm test
  
  lint-and-test-backend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt
      
      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install -r requirements.txt
      
      - name: Lint backend
        working-directory: ./backend
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Test backend
        working-directory: ./backend
        run: pytest
  
  build-and-push:
    needs: [lint-and-test-frontend, lint-and-test-backend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            yourusername/ai-recommendation-frontend
            yourusername/ai-recommendation-backend
          tags: |
            type=ref,event=branch
            type=sha,format=short
      
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.frontend
          push: true
          tags: yourusername/ai-recommendation-frontend:${{ github.ref_name }}-${{ github.sha | slice(0, 7) }}
          cache-from: type=registry,ref=yourusername/ai-recommendation-frontend:buildcache
          cache-to: type=registry,ref=yourusername/ai-recommendation-frontend:buildcache,mode=max
      
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.backend
          push: true
          tags: yourusername/ai-recommendation-backend:${{ github.ref_name }}-${{ github.sha | slice(0, 7) }}
          cache-from: type=registry,ref=yourusername/ai-recommendation-backend:buildcache
          cache-to: type=registry,ref=yourusername/ai-recommendation-backend:buildcache,mode=max
  
  deploy:
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add deployment steps here, such as:
          # - SSH into server
          # - Pull latest Docker images
          # - Update docker-compose.yml with new image tags
          # - Restart containers
        env:
          DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}